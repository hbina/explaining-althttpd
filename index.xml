<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home page? on hbina page</title><link>https://hbina.github.io/</link><description>Recent content in Home page? on hbina page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://hbina.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing a basic redis clone in Go from scratch</title><link>https://hbina.github.io/redis_clone/</link><pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate><guid>https://hbina.github.io/redis_clone/</guid><description>Introduction In this tutorial, we will write a basic redis server that is capable of responding to valid RESP requests. In case you are not familiar with what redis is, check out their website. Needless to say, it is an extremely popular caching mechanism that is used everywhere.
However, you might think to yourself that implementing one is a daunting task. I am going to show you that (minus all the critical performance requirements), a redis server is in fact pretty simple.</description></item><item><title>althttpd: From Top to Bottom</title><link>https://hbina.github.io/althttp_from_top_to_bottom/</link><pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate><guid>https://hbina.github.io/althttp_from_top_to_bottom/</guid><description>Before Venturing Further&amp;hellip; It&amp;rsquo;s nice to have the codebase open as reference. Each chapters will cover mostly 1 function and I wouldn&amp;rsquo;t go through every single bit. Just the parts that I find interesting. I will cover the global variables as we go through.
Sometimes there will be backtracking and jumping ahead of the source code as I see necessary.
Please read about the design philosophy here.
Check out the source code here.</description></item></channel></rss>